# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-02-18 05:12
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.crypto
import django.utils.timezone
import frontier.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('token', models.CharField(max_length=32, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('disabled', models.BooleanField(default=True)),
                ('storytime', models.TextField(null=True)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('type', models.CharField(choices=[(b'administrator', b'administrator'), (b'applicant', b'applicant'), ('hiring manager', 'hiring manager')], max_length=16)),
                ('username', models.CharField(default=django.utils.crypto.get_random_string, max_length=64, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, frontier.models.AddressFields),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=32, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('disabled', models.BooleanField(default=True)),
                ('storytime', models.TextField(null=True)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('name', models.CharField(max_length=64)),
                ('logo', models.ImageField(upload_to=b'')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, frontier.models.AddressFields),
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='business.Company'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
            ],
            options={
                'verbose_name': 'Administrator',
                'proxy': True,
                'verbose_name_plural': 'Administrators',
                'indexes': [],
            },
            bases=('business.user',),
        ),
        migrations.CreateModel(
            name='Applicant',
            fields=[
            ],
            options={
                'verbose_name': 'Applicant',
                'proxy': True,
                'verbose_name_plural': 'Applicants',
                'indexes': [],
            },
            bases=('business.user',),
        ),
        migrations.CreateModel(
            name='HiringManager',
            fields=[
            ],
            options={
                'verbose_name': 'Hiring Manager',
                'proxy': True,
                'verbose_name_plural': 'Hiring Managers',
                'indexes': [],
            },
            bases=('business.user',),
        ),
    ]
